<!DOCTYPE html>
<meta charset="utf-8">
<style>

text {
  font: 10px sans-serif;
}

.tooltip {
  background: white;
  border: 1px solid #dedede;
  padding: 10px;
  display: none;
  position: absolute;
  max-width: 400px;
}
</style>
<body>
  <div class="row">
  <div class="col s12">
  <div class="col s6 offset-s6">
      <a class="waves-effect waves-light btn" id="distanceButton" onclick="">Distance</a>
      <a class="waves-effect waves-light btn" id="ratingButton">Rating</a>
      <%= @query %>
      <%= @coordinates %>
</div>
</div>
</div>

  <div class="tooltip">
    <h2></h2>
    <p>Location</p>
    <p>Hours</p>
    <p>Rating</p>
  </div>
 <div class="col s12" id="myGraph">
 </div>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var diameter = 960,
    format = d3.format(",d"),
    color = d3.scale.category20c();

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("#myGraph").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");

// "/flare.json"
d3.json("http://localhost:3000/api/v1/circles?search=<%= @query %>&coordinates=<%= @coordinates %>", function(error, root) {
  if (error) throw error;

  //console.log(JSON.stringify(classes(root)))
  console.log(JSON.stringify(root))
  // console.log(root["children"])

/////
  var new_root = jQuery.extend(true, {}, root)
  for(value in new_root["children"]){
    var swap_value = new_root["children"][value].value
    new_root["children"][value].value = new_root["children"][value].value2
    new_root["children"][value].value2 = swap_value
  }

var node2 = svg.selectAll(".node1")
      .data(bubble.nodes(new_root)
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node1")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

var circles2 = node2.append("circle")
    .attr("r", 0)
    .style("block", "none")

    circles2
      .transition()
      .duration(1000)
        .attr("r", function(d) { return d.r })

    node2.append("title")
            .text(function(d) { return d.className + ": " + format(d.value); });
  $(".node1").hide();

///////
  var node = svg.selectAll(".node")
      .data(bubble.nodes(root)
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });


  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  var circles = node.append("circle")
      .attr("r", 0)


      circles
        .transition()
        .duration(1000)
          .attr("r", function(d) { return d.r })

      node.style("fill", function(d) { return color(d.packageName); })
      .on("mouseover", function(d, i) {

        d3.select(".tooltip h2").text(function(){return d.className })

        d3.select(".tooltip")
          .style("display", "block")
          .style("left", (d3.event.pageX)+"px")
          .style("top", (d3.event.pageY)+"px")

        // console.log(d, i, this)
        // console.log("hello")
        // this.attr("fill", "rgb(100,68,26)")
        // console.log(this)
      })
      .on("mouseout", function(d, i){
        d3.select(".tooltip").style("display", "none")
      })

      node
      .on("click", function(d, i){
        console.log("I have been clicked.")

        // console.log(d, i, this)
        // this.attr("fill", "rgb(100,68,26)")
        // this.setAttribute("fill", "rgb(100,68,26)");

        d3.select(this).style("fill", "rgb(	255, 174, 66)");
        console.log(d)
        // change color
      })


      d3.select("#ratingButton")
        .on("click", function() {

          var hiddenCircles = document.getElementsByClassName("node1");

          var visibleCircles = document.getElementsByClassName("node");

          var myArray = []

          for(var i = 0; i < hiddenCircles.length; i++) {
            radius = hiddenCircles[i].childNodes[0].getAttribute("r");
            myArray.push(radius);
          }


          circles
            .transition()
            .duration(1000)
              .attr("r", function(d, index) { d.r = myArray[index]; return d.r })
        })

      d3.select("#distanceButton")
          .on("click", function() {

            var hiddenCircles = document.getElementsByClassName("node1");

            var visibleCircles = document.getElementsByClassName("node");

            var myArray = []

            for(var i = 0; i < visibleCircles.length; i++) {
              radius = hiddenCircles[i].childNodes[0].getAttribute("r");
              myArray.push(radius);
            }

            circles
                .transition()
                .duration(1000)
                .attr("r", function(d) { return d.r })
          })
  // node.append("text")
  //     .attr("dy", ".3em")
  //     .style("text-anchor", "middle")
  //     .text(function(d) { return d.className.substring(0, d.r / 3); });
});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root);
  return {children: classes};
}


d3.select(self.frameElement).style("height", diameter + "px");

</script>
